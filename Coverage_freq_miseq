## load bam file using the which argument to ScanBamParam
library(Rsamtools)
library(ggplot2)
library(tidyr)
library(dplyr)
library(tibble)

#Get into the right library
#setwd("./Documents/Postdoc/Sequencing/miseq/190212/Analysis")
setwd("./Documents/Postdoc/Sequencing/miseq/190212")


bamfile <- "20at_amplicons.bam"
bf <- BamFile(bamfile)
#Define region of interest
which <- IRangesList(pYES1L_DEBS123co = IRanges(35000, 35500))
param <- ScanBamParam(what=scanBamWhat(), which=which)
#Be less stringent with the max_depth and remove strad ID
p_param <- PileupParam(max_depth=1000, distinguish_strand=FALSE)

#pile-up to get the region of interest
res <- pileup(bf, scanBamParam=param, pileupParam=p_param)

##Special function##
pileupFreq <- function(pileupres) {
  nucleotides <- levels(pileupres$nucleotide)
  res <- split(pileupres, pileupres$seqnames)
  res <- lapply(res, function (x) {split(x, x$pos)})
  res <- lapply(res, function (positionsplit) {
    nuctab <- lapply(positionsplit, function(each) {
      chr = as.character(unique(each$seqnames))
      pos = as.character(unique(each$pos))
      tablecounts <- sapply(nucleotides, function (n) {sum(each$count[each$nucleotide == n])})
      c(chr,pos, tablecounts)
    })
    nuctab <- data.frame(do.call("rbind", nuctab),stringsAsFactors=F)
    rownames(nuctab) <- NULL
    nuctab
  })
  res <- data.frame(do.call("rbind", res),stringsAsFactors=F)
  rownames(res) <- NULL
  colnames(res) <- c("seqnames","start",levels(pileupres$nucleotide))
  res[3:ncol(res)] <- apply(res[3:ncol(res)], 2, as.numeric)
  res
}

#Find the frequencies
res_freq <- pileupFreq(res)
#Select only nt frequency and turn unto tidy data
nt_freq <- select(res_freq, start, A, C, G, T)
nt_freq <- filter(nt_freq, start > 35122 & start < 35216)
#Add the original sequence
wt <- "tggcgcgctcacggcgtaaccccggctgctgtagttggccactcccagggtgagatcgcagcggcacacgtggcgggcgcgctgtctcttgaa"
base <- substring(wt, seq(1, nchar(wt), 1), seq(1,nchar(wt),1))
nt_freq <- add_column(nt_freq, wt = base)
nt_freq <- gather(nt_freq, 'A', 'C', 'G', 'T', key = "nt", value = "freq")
nt_freq <- transform(nt_freq, freq=as.factor(freq), 
                     group = as.factor(findInterval(freq, seq(1, 1000, by=500))))


#Plot
#From factors to numeric
nt_freq$freq=as.numeric(levels(nt_freq$freq))[nt_freq$freq]
#Create my own breaks
my_breaks <- function(x) { if (max(x) > 10) seq(0, 1000, 200) else seq(0, 10, 2) }

p <- ggplot(nt_freq, aes(start, freq, fill = nt)) +
  facet_grid(group~., scales="free") +
  geom_bar(stat = "identity", position = "dodge") +
  scale_y_continuous(breaks = my_breaks)

p +  scale_x_discrete(labels = base)
